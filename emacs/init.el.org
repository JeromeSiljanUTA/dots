#+TITLE: init.el
#+PROPERTY: header-args :tangle ~/.config/emacs/init.el
* init.el
** custom-file
#+BEGIN_SRC elisp
(setq custom-file "~/.config/emacs/custom-file.el")
(load custom-file)
;; use-package refresher:
;; :config runs stuff after package loaded
;; :mode does before
;; :ensure makes sure packages are correctly installed
;; :hook run this when in that mode (that . this)
#+END_SRC

** [[https://github.com/greduan/emacs-theme-gruvbox][gruvbox-theme]]
#+BEGIN_SRC elisp
(use-package gruvbox-theme
  :preface
  (eval-and-compile(load "~/.config/emacs/client_scripts/theme-switcher.el"))
  :config
  (theme-switcher-init-theme)
  :custom
  (custom-safe-themes t)
)
#+END_SRC

** use-package
#+BEGIN_SRC elisp
;; Same as putting :ensure t on all packages
(require 'use-package-ensure)
(setq use-package-always-ensure t)

;; Install use-package if not installed
(package-refresh-contents)
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+END_SRC

** melpa
#+BEGIN_SRC elisp
;; Define package repos, initialize
(use-package package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+END_SRC

** [[https://github.com/wbolster/emacs-direnv][direnv]]
#+BEGIN_SRC elisp
;; https://github.com/wbolster/emacs-direnv
(use-package direnv
  :config
  (direnv-mode))
#+END_SRC

** [[https://github.com/magit/magit][magit]]
#+BEGIN_SRC elisp
;; https://github.com/magit/magit
(use-package magit)
#+END_SRC

** [[https://github.com/magnars/expand-region.el][expand-region]]
#+BEGIN_SRC elisp
(use-package expand-region
  :config
  (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC 

** [[https://github.com/joaotavora/yasnippet][yasnippet]]
#+BEGIN_SRC elisp
(use-package yasnippet
  :custom
  (yas-snippet-dirs '("~/.config/emacs/snippets"))
  :config
  (yas-global-mode 1))
#+END_SRC 

** [[https://github.com/millejoh/emacs-ipython-notebook][ein]]
#+BEGIN_SRC elisp
(use-package ein
  :custom
  (ein:output-area-inlined-images t))
#+END_SRC

** [[https://orgmode.org/][org]]
#+BEGIN_SRC elisp
(use-package org
  :preface
  (eval-and-compile(load "~/.config/emacs/client_scripts/org-setup-buffer.el"))
  :custom
  ;; When selecting a region, commands apply to the whole region
  (org-agenda-loop-over-headlines-in-active-region nil)
  (org-babel-load-languages '((shell . t) (C . t) (R . t) (python . t)))
  (org-edit-src-content-indentation 0)
  (org-deadline-warning-days 0)
  (org-agenda-files '("/home/jerome/misc/gtd/main.org"))
    (org-refile-targets
   '(("~/misc/gtd/main.org" :maxlevel . 1)
     ("~/misc/gtd/diary.org" :maxlevel . 1)
     ("~/misc/gtd/phone_in.org" :maxlevel . 1)))
   (org-agenda-custom-commands
    '(("c" "Tasks by context with Agenda"
       ((agenda ""
		((org-agenda-span '3)
		 (org-agenda-overriding-header "Agenda")))
	(tags-todo "@school"
		   ((org-agenda-overriding-header "Tasks @school")))
	(tags-todo "@anywhere"
		   ((org-agenda-overriding-header "Tasks @anywhere")))
	(tags-todo "@home"
		   ((org-agenda-overriding-header "Tasks @home")))
	(tags-todo "@couch"
		   ((org-agenda-overriding-header "Tasks @couch")))
	(tags-todo "@waiting"
		   ((org-agenda-overriding-header "Tasks @waiting"))))
       nil nil)))
  :config
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  :hook (org-mode . org-setup-buffer))
#+END_SRC

** [[https://www.flycheck.org/en/latest/][flycheck]]
#+BEGIN_SRC elisp
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC

** [[https://github.com/lassik/emacs-format-all-the-code][format-all]]
#+BEGIN_SRC elisp
(use-package format-all
  :hook
  (prog-mode . format-all-mode)
  (format-all-mode . format-all-ensure-formatter))
;;(add-hook 'prog-mode-hook 'format-all-mode)
;;(add-hook 'format-all-mode-hook 'format-all-ensure-formatter)
#+END_SRC

** [[https://github.com/abo-abo/avy][avy]]
#+BEGIN_SRC elisp
(use-package avy
  :config
  (global-set-key (kbd "C-:") 'avy-goto-char))
#+END_SRC

** [[https://github.com/emacs-helm/helm/][helm]]
#+BEGIN_SRC elisp
(use-package helm
  :custom
  (helm-locate-fuzzy-match t)
  (helm-move-to-line-cycle-in-source nil)
  :config
  (global-set-key (kbd "M-x") 'helm-M-x))
#+END_SRC

** [[https://github.com/vedang/pdf-tools][pdf-tools]]
#+BEGIN_SRC elisp
(use-package pdf-tools
  :preface
  (eval-and-compile(load "~/.config/emacs/client_scripts/PDFView-setup-buffer.el"))  
  :defer t
  :custom
  (pdf-view-display-size 'fit-page)
  :hook
  (pdf-view-mode . pdf-view-setup-buffer)
  :config
  (pdf-tools-install))
#+END_SRC

** [[https://github.com/org-roam/org-roam][org-roam]]
#+BEGIN_SRC elisp
(use-package org-roam)
#+END_SRC

** [[https://github.com/joostkremers/writeroom-mode][writeroom-mode]]
#+BEGIN_SRC elisp
(use-package writeroom-mode
  :custom
  (writeroom-fullscreen-effect 'maximized)
  (writeroom-maximize-window nil))
#+END_SRC

** [[https://github.com/meqif/docker-compose-mode][docker-compose-mode]]
#+BEGIN_SRC elisp
(use-package docker-compose-mode)
#+END_SRC

** [[https://github.com/weirdNox/org-noter][org-noter]]
#+BEGIN_SRC elisp
(use-package org-noter
  :custom
  (org-noter-always-create-frame nil))
#+END_SRC

** [[https://depp.brause.cc/nov.el/][nov]]
#+BEGIN_SRC elisp
(use-package nov
  :mode ("\\.epub\\'" . nov-mode))
#+END_SRC

** python
#+BEGIN_SRC elisp
(use-package python
  :init
  ;; C-c C-c respects __init__
  (define-key python-mode-map (kbd "C-c C-c")
	      (lambda () (interactive) (python-shell-send-buffer t))))
#+END_SRC

** eshell
#+BEGIN_SRC elisp
(require 'esh-module)
(setq password-cache t)
(setq password-cache-expiry 3600)
(add-to-list 'eshell-modules-list 'eshell-tramp)
(add-hook 'eshell-mode-hook (lambda () (setenv "TERM" "xterm-256color")))
#+END_SRC

** aesthetics, extra customization
#+BEGIN_SRC elisp
;; Hide scroll bar, menu bar, tool bar
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

(set-frame-font "IBM Plex Mono 12" t)

;; Start emacs daemon
(server-start)

;; Use ibuffer instead of BufferMenu
(global-set-key (kbd "C-x C-b") 'ibuffer)

(provide 'init)
;;; init.el ends here
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC 
