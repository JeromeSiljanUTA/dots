#!/usr/bin/env python3
"""
Python application to deal with monitor events so I don't have to
"""

import subprocess
import sys


def set_wallpaper():
    """
    sets wallpaper using fehbg script
    """
    try:
        proc_state = subprocess.run(
            ["/home/jerome/.fehbg"], shell=True, check=True, capture_output=True
        )
    except:
        raise Exception("No fehbg script found")


def update_monitors():
    """
    Parses output of xrandr -q for monitors
    Running `xrandr -q` makes the parsing more obvious
    Returns:
    Monitor dictionary

    """
    proc_state = subprocess.run(
        ["xrandr", "-q"], shell=True, check=True, capture_output=True
    )

    # clean output and set lines to be iterated over
    proc_out = proc_state.stdout.decode("UTF-8").splitlines()

    return {
        line.split()[0]: {
            "status": line.split()[1],
            "resolution": (  # add resolution if next line shows it
                proc_out[index + 1].split()[0]
                if index + 1 in range(len(proc_out))
                and "+" in proc_out[index + 1]
                and "connected" not in proc_out[index + 1]
                else ""
            ),
        }
        for index, line in enumerate(proc_out)
        if "connected" in line
    }


def set_local():
    """
    Finds name of local monitor
    Returns:
    Name of local monitor, -1 on failure

    """
    for monitor in monitors:
        if "eDP" in monitor or 'LVDS' in monitor:
            return monitor

    return -1


def set_ext():
    """
    Finds name of external monitor
    Returns:
    Name of external monitor, -1 on failure

    """
    for monitor, properties in monitors.items():
        if ("eDP" not in monitor and 'LVDS' not in monitor) and properties.get("status") == "connected":
            return monitor

    return -1


def single_monitor(target_monitor):
    if -1 == target_monitor:
        raise Exception("Monitor doesn't exist/isn't plugged in")
    subprocess.run(["xrandr", "--output", target_monitor, "--auto"], check=True)
    for monitor in monitors:
        if monitor != target_monitor:
            subprocess.run(["xrandr", "--output", monitor, "--off"], check=True)
    set_wallpaper()


def to_right():
    if -1 in [local, ext]:
        raise Exception("Monitor doesn't exist/isn't plugged in")
    subprocess.run(["xrandr", "--output", local, "--auto"], check=True)
    subprocess.run(["xrandr", "--output", ext, "--auto", "--pos", "1920x0"], check=True)
    for monitor in monitors:
        if monitor not in [local, ext]:
            subprocess.run(["xrandr", "--output", monitor, "--off"], check=True)

    move_desktops()
    set_wallpaper()


def remove_dummy():
    """
    Removes dummy desktops named "Desktop"
    Returns:
    -1 on failure

    """
    while True:
        try:
            subprocess.run(
                ["bspc", "desktop", "Desktop", "--remove"],
                check=True,
                capture_output=True,
            )
        except subprocess.CalledProcessError:
            return -1


def set_desktops():
    remove_dummy()
    proc_state = subprocess.run(
        ["bspc", "query", "--desktops", "--names"], check=True, capture_output=True
    )
    # set output to list
    return proc_state.stdout.decode("UTF-8").splitlines()


def move_desktops():
    print("reply 'y' to move desktop to external monitor")

    for desktop in set_desktops():
        if input(f"Move {desktop} to {ext}? ").lower() == "y":
            subprocess.run(
                ["bspc", "desktop", desktop, "--to-monitor", ext], check=True
            )


monitors = update_monitors()

# subprocess.run(f"xrandr --output {monitor} --auto".split(), check=True)
local = set_local()
ext = set_ext()
# to_right()
# single_monitor(eDP)


if len(sys.argv) > 1:
    if sys.argv[1] == "mono":
        single_monitor(local)
    elif sys.argv[1] == "ext":
        single_monitor(ext)
    elif sys.argv[1] == "right":
        to_right()
else:
    try:
        single_monitor(ext)
    except:
        single_monitor(local)
