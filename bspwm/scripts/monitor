#!/usr/bin/env python3
"""
Python application to deal with monitor events so I don't have to.
"""

import subprocess
import sys


def set_wallpaper():
    # Set wallpaper using fehbg script.
    try:
        proc_state = subprocess.run(
            ["/home/jerome/.fehbg"], shell=True, check=True, capture_output=True
        )
    except:
        raise Exception("No fehbg script found.")


def update_monitors() -> dict:
    # Parses output of `xrandr -q` for monitors.

    proc_state = subprocess.run(
        ["xrandr", "-q"], shell=True, check=True, capture_output=True
    )

    # Clean output and set lines to be iterated over.
    proc_out = proc_state.stdout.decode("UTF-8").splitlines()

    return {
        line.split()[0]: {
            "status": line.split()[1],
            "resolution": (  # Add resolution if next line shows it.
                proc_out[index + 1].split()[0]
                if index + 1 in range(len(proc_out))
                and "+" in proc_out[index + 1]
                and "connected" not in proc_out[index + 1]
                else ""
            ),
        }
        for index, line in enumerate(proc_out)
        if "connected" in line
    }


def set_local() -> str:
    # Find name of local (built-in) monitor.
    for monitor in monitors:
        if "eDP" in monitor or "LVDS" in monitor:
            return monitor

    raise Exception("Could not find build in monitor.")


def set_ext() -> list:
    # Find names of external monitors
    monitor_list = []
    for monitor, properties in monitors.items():
        if ("eDP" not in monitor and "LVDS" not in monitor) and properties.get(
            "status"
        ) == "connected":
            monitor_list.append(monitor)

    return monitor_list

    if not monitor_list:
        raise Exception("Could not find external monitor.")


def single_monitor(target_monitor: str):
    # Disables all monitors but target_monitor and sets wallpaper.

    subprocess.run(["xrandr", "--output", target_monitor, "--auto"], check=True)
    for monitor in monitors:
        if monitor != target_monitor:
            subprocess.run(["xrandr", "--output", monitor, "--off"], check=True)
    set_wallpaper()


def to_right():
    # Sets external monitor to the right of built-in monitor and sets wallpaper.
    subprocess.run(["xrandr", "--output", local, "--auto"], check=True)
    subprocess.run(["xrandr", "--output", ext, "--auto", "--pos", "1920x0"], check=True)
    for monitor in monitors:
        if monitor not in [local, ext]:
            subprocess.run(["xrandr", "--output", monitor, "--off"], check=True)

    move_desktops()
    set_wallpaper()


def remove_dummy():
    # Remove dummy desktops named "Desktop".

    try:
        subprocess.run(
            ["bspc", "desktop", "Desktop", "--remove"],
            check=True,
            capture_output=True,
        )
    except subprocess.CalledProcessError:
        print(f"Failed to remove any desktops named 'Desktop', maybe they don't exist?")


def set_desktops() -> list:
    # Create list of desktops.
    remove_dummy()
    proc_state = subprocess.run(
        ["bspc", "query", "--desktops", "--names"], check=True, capture_output=True
    )
    # set output to list
    return proc_state.stdout.decode("UTF-8").splitlines()


def move_desktops(target_monitor: str):
    # Move desktops to monitors based on
    print("reply 'y' to move desktop to external monitor")

    for desktop in set_desktops():
        if input(f"Move {desktop} to {target_monitor}? ").lower() == "y":
            subprocess.run(
                ["bspc", "desktop", desktop, "--to-monitor", target_monitor], check=True
            )


def dual(ext: list, local: str):
    # Set up dual external monitors
    if "VGA" in ext[0]:
        left = ext[0]
        right = ext[1]
    else:
        left = ext[1]
        right = ext[0]

    subprocess.run(
        [
            "xrandr",
            "--output",
            left,
            "--primary",
            "--mode",
            "1280x1024",
            "--pos",
            "0x450",
            "--rotate",
            "normal",
        ],
        check=True,
    )
    subprocess.run(["xrandr", "--output", local, "--off"], check=True)

    subprocess.run(
        [
            "xrandr",
            "--output",
            right,
            "--mode",
            "1920x1080",
            "--pos",
            "1280x0",
            "--rotate",
            "normal",
        ],
        check=True,
    )

    for monitor in monitors:
        if monitor not in [local] + ext:
            subprocess.run(["xrandr", "--output", monitor, "--off"], check=True)

    set_wallpaper()
    move_desktops(right)


monitors = update_monitors()

local = set_local()
ext = set_ext()

if len(sys.argv) > 1:
    if sys.argv[1] == "mono":
        single_monitor(local)
    elif sys.argv[1] == "ext":
        single_monitor(ext[0])
    elif sys.argv[1] == "right":
        to_right()
    elif sys.argv[1] == "dual":
        dual(ext, local)
else:
    try:
        pass
        single_monitor(ext)
    except:
        single_monitor(local)
